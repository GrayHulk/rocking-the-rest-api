/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ihoneymon' at '14. 1. 26 오후 1:07' with Gradle 1.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'

version = '1.0'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

configurations {
    querydslapt
}

ext {
    javaVersion = '1.7'
    versions = [
        spring_core: '4.0.1.RELEASE',
        hibernate: '4.3.1.Final',
        hibernate_validator: '5.0.3.Final',
        bonecp: '0.8.0.RELEASE',
        spring_data: '1.4.3.RELEASE',
        spring_data_redis: '1.1.1.RELEASE',
        querydsl: '3.3.0',
        jackson: '1.9.13',
        jackson2: '2.3.1',
        guava: '16.0',
        lombok: '1.12.4',
        h2database: '1.3.175',
        joda_time: '2.3',
        slf4j: '1.7.5',
        logback: '1.1.0',
        modelmapper: '0.6.3',
        ehcache: '2.6.8'
    ]
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

sourceSets {
    querydsl {
        java {
            srcDirs = ['src/main/querydsl']
        }
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'javax.inject:javax.inject:1'

    //spring core, bean, context
    compile 'org.springframework:spring-core:' + versions.spring_core
    compile 'org.springframework:spring-context:' + versions.spring_core
    compile 'org.springframework:spring-context-support:' + versions.spring_core
    compile 'org.springframework:spring-beans:' + versions.spring_core
    compile 'org.springframework:spring-test:' + versions.spring_core

    //spring mvc & web
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'javax.servlet:jstl:1.2'
    compile 'org.springframework:spring-web:' + versions.spring_core
    compile 'org.springframework:spring-webmvc:' + versions.spring_core

    //database
    compile 'org.springframework:spring-tx:' + versions.spring_core
    compile 'org.springframework:spring-jdbc:' + versions.spring_core
    compile 'org.hibernate:hibernate-c3p0:' + versions.hibernate
    compile 'com.jolbox:bonecp:' + versions.bonecp
    compile 'com.h2database:h2:' + versions.h2database

    //hibernate, spring data jpa, querydsl
    compile 'org.hibernate:hibernate-core:' + versions.hibernate
    compile 'org.hibernate:hibernate-entitymanager:' + versions.hibernate
    compile 'org.hibernate:hibernate-envers:' + versions.hibernate
    compile 'org.hibernate:hibernate-validator:' + versions.hibernate_validator

    compile 'org.springframework:spring-orm:' + versions.spring_core
    compile 'org.springframework.data:spring-data-jpa:' + versions.spring_data

    compile 'com.mysema.querydsl:querydsl-jpa:' + versions.querydsl
    compile 'com.mysema.querydsl:querydsl-apt:' + versions.querydsl

    //redis
    compile 'org.springframework.data:spring-data-redis:' + versions.spring_data_redis

    //etc
    compile 'com.google.guava:guava:' + versions.guava
    compile 'joda-time:joda-time:' + versions.joda_time
    compile 'org.projectlombok:lombok:' + versions.lombok
    
    //etc:ehcache
    compile 'net.sf.ehcache:ehcache-core:' + versions.ehcache
    
	//etc: modelMapper
	compile 'org.modelmapper:modelmapper:' + versions.modelmapper
	
    //etc: jackson
    compile 'org.codehaus.jackson:jackson-mapper-asl:' + versions.jackson

    //etc: jackson2
    compile 'com.fasterxml.jackson.core:jackson-databind:' + versions.jackson2
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:' + versions.jackson2

	//etc://etc
    compile 'ch.qos.logback:logback-classic:' + versions.logback
    compile 'org.slf4j:slf4j-api:' + versions.slf4j
    runtime 'org.slf4j:jcl-over-slf4j:' + versions.slf4j
    runtime 'org.slf4j:log4j-over-slf4j:' + versions.slf4j
    testCompile 'junit:junit:4.11'
}

//exclude common-logging
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

/**
 1. java source directory create
 2. resources directory create
 3. web source directory create
 */
task initProject(description: 'Initialization Project') << {
    ext.createDir = {
        println 'Create Dir : '+ it
        it.mkdirs()
    }

    sourceSets.main.java.srcDirs.each createDir
    sourceSets.main.resources.srcDirs.each createDir
    sourceSets.test.java.srcDirs.each createDir
    sourceSets.test.resources.srcDirs.each createDir
    sourceSets.querydsl.java.srcDirs.each createDir

    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
    createDir new File(webAppDir, '/resources')
}

//-- QueryDSL
task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    println classpath
    options.compilerArgs = [
            '-proc:only',
            '-processor', 'com.mysema.query.apt.jpa.JPAAnnotationProcessor'
    ]
    destinationDir = sourceSets.querydsl.java.srcDirs.iterator().next()
    dependencyCacheDir = compileJava.dependencyCacheDir
}
//-- QueryDSL

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

clean {
    delete sourceSets.querydsl.java.srcDirs
}
